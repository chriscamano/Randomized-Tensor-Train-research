function [X,Lambda,Res] = rarnoldi(A,k,tau)
%if nargin <** tau=1e-10;
% shift for mgs **
% A
% k
%
%
s=4*d;                                      %target embedding dimension
w=zeros(n,d);                               %init w vectors                            %init Basis
S=zeros(s,n);                               %init S 
d0=5;                                       %default number of basis vectors/ 
n=size(A,1);



%% Line 2                                   Create subsampled random fourier transform embedding (SRFT)
S= zeros(s,n);
for  i=1:s
    z=zeros(n,1);
    z(randi([1,n]))=exp(1i*2*pi*rand);
    S(i,:)=fft(z);
end

%% Line 3
w(:,1)=randn(n,1);                          %init starting vector
%% Line 4
B=zeros(n,d);                               %init Basis
B(:,1)=(w(:,1)/norm(w(:,1)));               %Normalize and init basis vector
AB=zeros(n,d);                              %init AB
AB(:,1)=A*B(:,1);                           %init first vector of AB based on guess 

%% Line                                     d-truncated Arnoldi iteration
m=10;
q1=rand(n,1);
q1 = q1/norm(q1);

Q = zeros(n,m); Q(:,1) = q1;
H = zeros(m,m-1);
for i=1:m-1
    z = A*Q(:,i);
    delta = norm(z);
    %% orthogonalize
    h1 = Q(:,1:i)'*z;
    z = z - Q(:,1:i)*h1;
    %% reorthogonalize
    h2 = 0;
    if norm(z) < 0.5*delta
        h2 = Q(:,1:i)'*z;
        z = z - Q(:,1:i)*h2;
    end
    %% update H
    H(1:i,i) = h1 + h2;
    H(i+1,i) = norm(z);
    %% expand subspace
    Q(:,i+1) = z/H(i+1,i);
end
%% Line 7 
B=Q;
M=A*B;

































%helper fucntion for S and also 
% compute residuals of oredered ritz pairs and update the dimension of the
% krylov subspace in the event that there is a bad res on one of the
% eigenvalues. 


% only project back into the orginal subspace once all of the ritz pairs
% have convereged 
end

